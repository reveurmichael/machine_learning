You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
<think>
Alright, so I'm trying to figure out how to get the snake from (5,5) to eat the apple at (8,3). Let's see. The head is currently at (5,5), and the body cells are empty, which means the snake is just the head right now—length 1.

First, I need to plan a path that moves the head towards the apple without causing any collisions or getting trapped. The apple is located at (8,3). So from (5,5), I need to move right three times because 8-5=3 and down two times because 5-3=2.

But wait, the direction can't be NONE anymore after the first move. Since the current direction is NONE, the first move can be any direction except reverse of NONE, which doesn't apply here.

Let me think about the path. The apple is to the right and down from the head. So moving right would make sense initially. But I should also check if there are any body parts in the way or future positions that might block the path after each move.

Since the body is empty, it's straightforward for the first few moves. Let me outline a possible sequence:

1. Move RIGHT: (5,5) → (6,5)
2. Move RIGHT again: (6,5) → (7,5)
3. Move RIGHT once more: (7,5) → (8,5)
4. Now, from (8,5), I need to move DOWN twice to reach (8,3). So next moves would be:
   - DOWN: (8,5) → (8,4)
   - DOWN: (8,4) → (8,3)

So the sequence would be RIGHT, RIGHT, RIGHT, DOWN, DOWN.

But wait, let's check if this path is safe and doesn't cause any collisions. Since the snake starts with length 1, moving right three times and then down two times won't have any body segments in the way because each move only adds a new head and removes the tail unless it eats an apple.

When moving to (8,5), the next move is DOWN to (8,4). Then another DOWN to (8,3) where the apple is. So yes, that should work.

I think this path is safe. Each step moves closer without reversing direction or causing any collisions.
</think>

```json
{
  "moves": ["RIGHT", "RIGHT", "RIGHT", "DOWN", "DOWN"],
  "reasoning": "The snake starts at (5,5) with no body segments. Moving right three times and then down twice safely navigates towards the apple at (8,3), ensuring each move doesn't reverse direction or cause collision."
}
```
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (5, 5) and whose body cells are in list format [], to eat the apple at (8, 3).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 starts with the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
