You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
I'll help you plan a safe path for the snake to reach the apple while following all the rules.

Let's analyze the current state:
- Head position: (1, 5)
- Current direction: UP
- Body cells: [(0, 3), (0, 4), (1, 4)]
- Apple position: (0, 5)

From this information, I notice that the snake is currently headed UP and cannot reverse direction immediately. The apple is directly to the left of the current head position.

Let's plan a safe path:
1. First move LEFT from (1, 5) to (0, 5), which puts us at the apple position.
2. Eating the apple will make this position part of the body, so we need to ensure there are no immediate collisions afterward.

Since we're currently moving UP and can't reverse immediately, our first move must be LEFT. After that, we would eat the apple at (0, 5).

Let's check if any other moves could be dangerous:
- If we try to go RIGHT, we'd collide with body part (1, 4).
- We cannot go DOWN since it would reverse direction from UP.

So our safe path is simply to move LEFT once to eat the apple. After eating the apple at (0, 5), the tail will remain in place, and no immediate danger exists.

Here's the JSON output:

```json
{
  "moves": ["LEFT"],
  "reasoning": "Move LEFT from (1, 5) directly to the apple at (0, 5). This is the safest path given current direction constraints."
}
```

This plan follows all movement rules and avoids any immediate danger.
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (1, 5) and whose body cells are in list format [(0, 3), (0, 4), (1, 4)], to eat the apple at (0, 5).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
