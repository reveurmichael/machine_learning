You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
<think>
Okay, so I'm trying to solve this Snake game problem where the snake starts at position (5,5) and needs to reach the apple at (5,2). The grid is 10x10, with coordinates ranging from (0,0) at the bottom-left to (9,9) at the top-right. 

First, I need to understand the movement rules thoroughly. The snake can move in four directions: UP, DOWN, LEFT, RIGHT, or NONE if it's not moving yet. Each move involves calculating the new head position and then updating the body accordingly.

The key points are:

1. **Direction Constraints**: The snake cannot reverse direction immediately. So if it's currently moving UP, it can't go DOWN next unless it was already going that way from a previous move (which doesn't apply here since we're just planning moves).

2. **Collision Avoidance**: The new head position must not be outside the grid or collide with any part of the body except when eating the apple and growing.

3. **Body Continuity**: After each move, the snake's body must remain continuous—each segment must be adjacent to the previous one.

4. **Apple Eating**: If the snake moves into the apple's position, it grows by one cell without moving its tail unless it needs to move normally.

Given that, my goal is to plan a path from (5,5) to (5,2). Let me visualize this:

- Starting at (5,5), the target is directly below at (5,2). The straight path would involve moving DOWN three times. But I need to check if that's possible without colliding with any walls or body.

Looking at the initial state:
- Head: (5,5)
- Current direction: NONE
- Body cells: empty list

Since the snake is alone, moving DOWN each time should be safe in terms of collisions because there's no one else on the grid. But I need to ensure that after each move, the snake doesn't block itself.

Let me outline possible moves:

1. **First Move**: Since direction is NONE, choosing DOWN would set new_head to (5,4). There are no body cells, so it's safe. Update the body by adding the head at the front and removing the tail (which doesn't exist yet since the body was empty except for the head).

2. **Second Move**: Now heading down again. New head is (5,3). Same logic applies—no collision with the body or walls.

3. **Third Move**: Again, move DOWN to (5,2), which is where the apple is. This should be valid because moving into the apple doesn't cause a collision as it's empty before eating.

However, after eating the apple, I need to ensure that there's at least one legal move next turn. If the snake has grown enough, this shouldn't be an issue here since we're just planning the path up to reaching the apple.

Wait, but in each step, when moving towards (5,2), the body is only adding segments as needed. Since initially empty and after three moves growing by one cell each time, it should maintain a continuous body.

So yes, moving straight DOWN from (5,5) to (5,4), then to (5,3), and finally to (5,2) seems feasible without any immediate collisions or issues.
</think>

The snake can move directly downward three times to reach the apple at (5,2). Since there are no other obstacles and the apple is adjacent below, this path is safe.

```json
{
  "moves": ["DOWN", "DOWN", "DOWN"],
  "reasoning": "Moving straight down from (5,5) to (5,2) without colliding with any walls or body segments."
}
```
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (5, 5) and whose body cells are in list format [], to eat the apple at (5, 2).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 starts with the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
