You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
<think>
Okay, I need to figure out how to get the snake's head from (8,2) to eat the apple at (9,2). Let's start by understanding the current state.

The snake's head is at (8,2), and it's currently moving up. The body has one segment at (8,1). So the full snake is [(8,2), (8,1)]. The apple is just to the right of the head at (9,2).

First, I should check if the current direction restricts my next move. Since the current direction is "UP", I can't go down on the first move because that would reverse the direction.

Looking at the head's position and the apple, moving right would directly get me to the apple. But wait, after moving right, what happens next?

If I choose "RIGHT" as my first move, the new head will be (9,2), which is exactly where the apple is. That's great because it means the snake will eat the apple and grow.

But before that, I need to ensure this move doesn't cause a collision. The body is at (8,1). Since the new head is (9,2), which isn't part of the body except possibly the tail. But in this case, since the body is only one segment, moving right wouldn't collide with any body parts.

After eating the apple, the snake's body will grow by one segment. So the new body list would be [(8,2)] because we insert the old head at the front and don't remove the tail.

Now, I need to make sure that after eating the apple, there is at least one legal move next turn. Since the apple is eaten in this first move, the snake's length increases, but the new position allows movement in other directions without immediate collision risk.

So moving "RIGHT" seems safe and efficient.
</think>

```json
{
  "moves": ["RIGHT"],
  "reasoning": "The head moves directly to the right to reach the apple at (9,2) without colliding with any body segments."
}
```
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (8, 2) and whose body cells are in list format [(8, 1)], to eat the apple at (9, 2).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 starts with the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
