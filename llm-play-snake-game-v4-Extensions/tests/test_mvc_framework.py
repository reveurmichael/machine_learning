#!/usr/bin/env python3
"""
MVC Framework Test Script
--------------------

Demonstrates the complete MVC architecture implementation for Snake-GTP.
Tests all components: Models, Views, Controllers, and Factories.

This script validates that the MVC framework is working correctly
and showcases the design patterns implemented.
"""

import sys
import logging
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_mvc_imports():
    """Test that all MVC components can be imported successfully."""
    print("üß™ Testing MVC Framework Imports...")
    
    try:
        # Test web package import
        import web
        print("‚úÖ Web package imported successfully")
        
        # Test controller imports
        from web.controllers import (
            BaseWebController,
            HumanGameController,
            GamePlayController,  # Task-0 gameplay controller
            BaseGamePlayController,
            BaseGameViewingController,
            ReplayController,
        )
        print("‚úÖ All controllers imported successfully")
        
        # Test model imports
        from web.models import GameStateModel, GameEvent, Observer
        print("‚úÖ All models imported successfully")
        
        # Test view imports
        from web.views import WebViewRenderer, TemplateEngine
        print("‚úÖ All views imported successfully")
        
        # Test factory imports
        from web.factories import ControllerFactory, ModelFactory, ViewRendererFactory
        print("‚úÖ All factories imported successfully")
        
        print("üéâ All MVC components imported successfully!\n")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import failed: {e}")
        return False


def test_template_engines():
    """Test template engine functionality."""
    print("üé® Testing Template Engines...")
    
    try:
        from web.views.template_engines import SimpleTemplateEngine, JinjaTemplateEngine
        
        # Test simple template engine
        simple_engine = SimpleTemplateEngine("web/templates", "web/static")
        
        # Test template rendering
        context = {
            'game_title': 'Test Game',
            'game_mode': 'Demo',
            'score': 42,
            'game_status': 'Active'
        }
        
        rendered = simple_engine.render_template('index.html', context)
        assert 'Test Game' in rendered
        assert 'Demo' in rendered
        assert '42' in rendered
        
        print("‚úÖ Simple template engine working")
        
        # Test Jinja engine (will fallback to simple if Jinja not available)
        jinja_engine = JinjaTemplateEngine("web/templates", "web/static")
        jinja_rendered = jinja_engine.render_template('index.html', context)
        assert 'Test Game' in jinja_rendered
        
        print("‚úÖ Jinja template engine working (or fallback)")
        print("üéâ Template engines test passed!\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Template engine test failed: {e}")
        return False


def test_controller_hierarchy():
    """Test controller inheritance hierarchy."""
    print("üèóÔ∏è Testing Controller Hierarchy...")
    
    try:
        from web.controllers import (
            BaseWebController,
            HumanGameController,
            GamePlayController,  # Task-0 gameplay controller
            BaseGamePlayController,
            BaseGameViewingController,
            ReplayController,
        )
        from web.models import GameStateModel
        
        # Create mock dependencies
        class MockStateProvider:
            def get_current_state(self):
                from dataclasses import dataclass
                @dataclass
                class MockState:
                    timestamp: float = 0.0
                    score: int = 0
                    steps: int = 0
                    game_over: bool = False
                    snake_positions: list = None
                    apple_position: tuple = (5, 5)
                    grid_size: tuple = (20, 20)
                    direction: str = "RIGHT"
                    end_reason: str = None
                    
                    def __post_init__(self):
                        if self.snake_positions is None:
                            self.snake_positions = [(10, 10), (9, 10)]
                
                return MockState()
            
            def make_move(self, direction):
                return {'success': True, 'score': 10}
            
            def reset_game(self):
                return {'success': True}
        
        class MockTemplateEngine:
            def render_template(self, name, context):
                return f"<html><body>Mock template: {name}</body></html>"
        
        class MockRenderer:
            def __init__(self):
                self.template_engine = MockTemplateEngine()
            
            def render_json(self, data):
                import json
                return json.dumps(data)
            
            def render_html(self, template, context):
                return self.template_engine.render_template(template, context)
        
        # Test controller creation
        model = GameStateModel(MockStateProvider())
        renderer = MockRenderer()
        
        # Test HumanGameController
        human_controller = HumanGameController(model, renderer)
        assert isinstance(human_controller, BaseGamePlayController)
        assert isinstance(human_controller, BaseWebController)
        print("‚úÖ HumanGameController hierarchy correct")
        
        # Test GamePlayController (Task-0 LLM gameplay)
        llm_controller = GamePlayController(model, renderer)
        assert isinstance(llm_controller, BaseGamePlayController)
        assert isinstance(llm_controller, BaseWebController)
        print("‚úÖ GamePlayController hierarchy correct")
        
        # Test ReplayController
        replay_controller = ReplayController(model, renderer)
        assert isinstance(replay_controller, BaseGameViewingController)
        assert isinstance(replay_controller, BaseWebController)
        print("‚úÖ ReplayController hierarchy correct")
        
        print("üéâ Controller hierarchy test passed!\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Controller hierarchy test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_factory_pattern():
    """Test factory pattern implementation."""
    print("üè≠ Testing Factory Pattern...")
    
    try:
        from web.factories import ControllerFactory, ViewRendererFactory
        
        # Test ViewRendererFactory
        view_factory = ViewRendererFactory()
        renderer = view_factory.create_renderer("web/templates", "web/static")
        print("‚úÖ ViewRendererFactory working")
        
        # Test ControllerFactory
        controller_factory = ControllerFactory()
        available_types = controller_factory.get_available_types()
        
        assert 'human_game' in available_types
        assert 'game' in available_types
        assert 'replay' in available_types
        
        print(f"‚úÖ ControllerFactory has types: {available_types}")
        
        print("üéâ Factory pattern test passed!\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Factory pattern test failed: {e}")
        return False


def test_design_patterns():
    """Test that design patterns are properly implemented."""
    print("üéØ Testing Design Patterns Implementation...")
    
    try:
        # Test Strategy Pattern (Template Engines)
        from web.views.template_engines import TemplateEngine, SimpleTemplateEngine
        
        # Verify abstract base class
        assert hasattr(TemplateEngine, 'render_template')
        assert hasattr(TemplateEngine, 'template_exists')
        
        # Verify concrete implementation
        engine = SimpleTemplateEngine("web/templates")
        assert hasattr(engine, 'render_template')
        assert callable(engine.render_template)
        
        print("‚úÖ Strategy Pattern implemented correctly")
        
        # Test Observer Pattern (Models)
        from web.models.observers import LoggingObserver
        
        # Verify observer interface
        observer = LoggingObserver()
        assert hasattr(observer, 'on_game_event')
        assert callable(observer.on_game_event)
        
        print("‚úÖ Observer Pattern implemented correctly")
        
        # Test Template Method Pattern (Controllers)
        from web.controllers import BaseWebController
        
        # Verify abstract methods exist
        assert hasattr(BaseWebController, 'handle_state_request')
        assert hasattr(BaseWebController, 'handle_control_request')
        
        print("‚úÖ Template Method Pattern implemented correctly")
        
        # Test Factory Pattern
        from web.factories import ControllerFactory
        
        factory = ControllerFactory()
        assert hasattr(factory, 'create_controller')
        assert callable(factory.create_controller)
        
        print("‚úÖ Factory Pattern implemented correctly")
        
        print("üéâ All design patterns test passed!\n")
        return True
        
    except Exception as e:
        print(f"‚ùå Design patterns test failed: {e}")
        return False


def demonstrate_mvc_workflow():
    """Demonstrate a complete MVC workflow."""
    print("üöÄ Demonstrating Complete MVC Workflow...")
    
    try:
        from web.controllers import HumanGameController
        from web.models import GameStateModel
        from web.views.template_engines import SimpleTemplateEngine
        
        # Create mock state provider
        class MockStateProvider:
            def get_current_state(self):
                from dataclasses import dataclass
                @dataclass
                class MockState:
                    timestamp: float = 1234567890.0
                    score: int = 150
                    steps: int = 75
                    game_over: bool = False
                    snake_positions: list = None
                    apple_position: tuple = (15, 8)
                    grid_size: tuple = (20, 20)
                    direction: str = "UP"
                    end_reason: str = None
                    
                    def __post_init__(self):
                        if self.snake_positions is None:
                            self.snake_positions = [(10, 10), (10, 11), (10, 12)]
                
                return MockState()
            
            def make_move(self, direction):
                return {'success': True, 'score': 160, 'message': f'Moved {direction}'}
        
        class MockRenderer:
            def __init__(self):
                self.template_engine = SimpleTemplateEngine("web/templates")
            
            def render_json(self, data):
                import json
                return json.dumps(data, indent=2)
        
        # 1. Create Model
        model = GameStateModel(MockStateProvider())
        print("‚úÖ Model created")
        
        # 2. Create View
        renderer = MockRenderer()
        print("‚úÖ View renderer created")
        
        # 3. Create Controller
        controller = HumanGameController(model, renderer)
        print("‚úÖ Controller created")
        
        # 4. Simulate state request (using simple context for testing)
        from dataclasses import dataclass
        @dataclass 
        class MockContext:
            data: dict
            client_info: dict
        
        state_context = MockContext(
            data={},
            client_info={'ip': '127.0.0.1', 'user_agent': 'test'}
        )
        
        state_response = controller.handle_state_request(state_context)
        print("‚úÖ State request handled")
        print(f"üìä Current score: {state_response.get('score', 'N/A')}")
        
        # 5. Simulate control request
        control_context = MockContext(
            data={'action': 'move', 'direction': 'left'},
            client_info={'ip': '127.0.0.1', 'user_agent': 'test'}
        )
        
        control_response = controller.handle_control_request(control_context)
        print("‚úÖ Control request handled")
        print(f"üéÆ Move result: {control_response.get('message', 'N/A')}")
        
        # 6. Demonstrate JSON rendering
        json_output = renderer.render_json(state_response)
        print("‚úÖ JSON rendering working")
        
        print("üéâ Complete MVC workflow demonstration successful!\n")
        return True
        
    except Exception as e:
        print(f"‚ùå MVC workflow demonstration failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Run all MVC framework tests."""
    print("üêç Snake-GTP MVC Framework Test Suite")
    print("=" * 50)
    
    tests = [
        ("Import Tests", test_mvc_imports),
        ("Template Engine Tests", test_template_engines),
        ("Controller Hierarchy Tests", test_controller_hierarchy),
        ("Factory Pattern Tests", test_factory_pattern),
        ("Design Patterns Tests", test_design_patterns),
        ("MVC Workflow Demo", demonstrate_mvc_workflow)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"Running {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå {test_name} failed\n")
        except Exception as e:
            print(f"‚ùå {test_name} crashed: {e}\n")
    
    print("=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! MVC framework is working correctly.")
        print("\nüèÜ MVC Architecture Features Verified:")
        print("   ‚úÖ Model-View-Controller separation")
        print("   ‚úÖ Role-based controller inheritance")
        print("   ‚úÖ Strategy pattern for template engines")
        print("   ‚úÖ Observer pattern for event handling")
        print("   ‚úÖ Factory pattern for component creation")
        print("   ‚úÖ Template method pattern in controllers")
        print("   ‚úÖ Decorator pattern for view enhancement")
        return True
    else:
        print(f"‚ùå {total - passed} tests failed. Please check the implementation.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 