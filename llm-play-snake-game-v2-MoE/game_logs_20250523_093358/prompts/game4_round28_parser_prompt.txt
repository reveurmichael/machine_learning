You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
To solve this problem, I'll need to plan a path for the snake from its current position (8, 8) to the apple at (8, 4), following all game rules. Let's analyze the situation:

1. The head is currently at (8, 8).
2. The apple is located at (8, 4).
3. Current direction is UP.
4. Body positions: [(5, 4), (5, 5), (6, 5), (6, 6), (7, 6), (7, 7), (8, 7)].

Since the snake's head is at (8, 8) and needs to reach (8, 4), we need to move directly downwards. However, we have to consider the snake's body positions.

The body segments that are in the way or close to the path include:
- (8, 7)
- (7, 7)

The most straightforward approach would be moving DOWN until reaching y=4 without colliding with any part of its own body. Here’s how we can plan this:

1. Move DOWN from (8, 8) to (8, 7).
2. Continue moving DOWN from (8, 7) to (8, 6).
3. Move DOWN from (8, 6) to (8, 5).
4. Finally, move DOWN from (8, 5) to (8, 4).

This path avoids colliding with the snake’s body and stays within grid bounds.

Here's the JSON object representing this plan:

```json
{
  "moves": ["DOWN", "DOWN", "DOWN", "DOWN"],
  "reasoning": "Move directly DOWN until reaching the apple at (8,4)."
}
```

Let's validate that:
1. Starting position: (8, 8)
2. Apple position: (8, 4)

The difference in y-coordinates is 4 units downward.

Moves needed:
- From (8, 8) to (8, 7): DOWN
- From (8, 7) to (8, 6): DOWN
- From (8, 6) to (8, 5): DOWN
- From (8, 5) to (8, 4): DOWN

Total moves = 4 DOWNs.

So the final output is:

```json
{
  "moves": ["DOWN", "DOWN", "DOWN", "DOWN"],
  "reasoning": "Move directly DOWN until reaching the apple at (8,4)."
}
```
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (8, 8) and whose body cells are in list format [(5, 4), (5, 5), (6, 5), (6, 6), (7, 6), (7, 7), (8, 7)], to eat the apple at (8, 4).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
