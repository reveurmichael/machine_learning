You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
To solve this problem, let's first understand the current position of the snake and the target apple:

- Head position: (2, 7)
- Current direction: LEFT
- Body cells: [(4, 7), (3, 7)]
- Apple position: (2, 9)

The goal is to move from (2, 7) to (2, 9). We need to make sure we don't reverse the current direction on the first move and avoid collisions with walls or body.

Let's analyze:
1. The snake is moving LEFT, so the first move cannot be RIGHT.
2. From (2, 7), to reach (2, 9), we only need to move UP twice.

Since there are no obstacles in this path and we don't reverse direction initially, a safe path would be just moving UP twice:

```
{
  "moves": ["UP", "UP"],
  "reasoning": "Move up from (2,7) to (2,8), then again from (2,8) to (2,9). No obstacles or collisions along this path."
}
```

Let's implement this in the expected JSON format:

```json
{
  "moves": ["UP", "UP"],
  "reasoning": "Move up from (2,7) to (2,8), then again from (2,8) to (2,9). No obstacles or collisions along this path."
}
```

This is the correct solution based on the constraints and current game state.
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (2, 7) and whose body cells are in list format [(4, 7), (3, 7)], to eat the apple at (2, 9).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
