You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
I'll analyze the current game state to find a safe path for the snake's head to reach the apple.

Here are the given inputs:
- Head position: (9, 6)
- Current direction: DOWN
- Body cells: [(9, 7)]
- Apple position: (9, 1)

Since we're starting from (9, 6) and moving towards (9, 1), let's think through this step-by-step:

1. We can't reverse direction on the first move because the current direction is DOWN.
2. We need to make sure that after each move, we avoid collisions with walls or body parts.
3. The goal is to get from (9, 6) to (9, 1), which means we'll need to go down multiple times.

Let's plan our moves:
- Since the head is at (9, 6) and the apple is at (9, 1), we should move DOWN directly.

Now let's implement this in JSON format:

```json
{
  "moves": ["DOWN", "DOWN", "DOWN", "DOWN", "DOWN"],
  "reasoning": "Move down directly to reach the apple at (9, 1) from (9, 6)."
}
```

I'll provide this as a valid JSON object:

```json
{
  "moves": ["DOWN", "DOWN", "DOWN", "DOWN", "DOWN"],
  "reasoning": "Move down directly to reach the apple at (9, 1) from (9, 6)."
}
```
This is the optimal path since we're already aligned horizontally with the apple and just need to move downward.
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (9, 6) and whose body cells are in list format [(9, 7)], to eat the apple at (9, 1).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
