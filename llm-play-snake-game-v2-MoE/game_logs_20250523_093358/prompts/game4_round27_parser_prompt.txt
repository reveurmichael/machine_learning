You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
I'll analyze the current game state to plan a safe path for the snake's head at (8, 8) to reach the apple at (8, 4). Here’s how I’ll proceed:

### Current State:
- Head position: (8, 8)
- Direction: UP
- Body cells: [(5, 4), (5, 5), (6, 5), (6, 6), (7, 6), (7, 7)]
- Apple position: (8, 4)

### Objective:
Move from head position (8, 8) to the apple at (8, 4).

### Constraints and Rules:
1. Cannot reverse direction immediately if current direction is UP.
2. The snake cannot move outside grid bounds or collide with its own body.
3. After eating the apple, ensure there's at least one legal move available.

### Path Planning:

Let’s break down the movements from (8, 8) to (8, 4):
- Since the y-coordinates are different and we need to move DOWN from (8, 8), I'll plan the moves accordingly.
- We can only go DOWN because the snake is already facing UP.

### Movement Plan:
1. Move DOWN once: (8, 7)
2. Move DOWN again: (8, 6)
3. Move DOWN once more: (8, 5)
4. Finally, move DOWN to reach apple: (8, 4)

This sequence ensures we avoid collisions with the body and stay within bounds.

### Final Plan:
The moves will be DOWN four times:

```json
{
  "moves": ["DOWN", "DOWN", "DOWN", "DOWN"],
  "reasoning": "Move directly DOWN from current position to reach apple at (8,4)."
}
```

Let’s verify the plan:
- Initial Position: (8, 8)
- After 1st DOWN: (8, 7)
- After 2nd DOWN: (8, 6)
- After 3rd DOWN: (8, 5)
- Final move to apple: (8, 4)

The number of DOWN moves is exactly equal to the difference in y-coordinates: 8 - 4 = 4. We've also ensured no collisions with walls or body.

So, here’s the JSON output:

```json
{
  "moves": ["DOWN", "DOWN", "DOWN", "DOWN"],
  "reasoning": "Move directly DOWN from current position to reach apple at (8,4)."
}
```
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (8, 8) and whose body cells are in list format [(5, 4), (5, 5), (6, 5), (6, 6), (7, 6), (7, 7), (8, 7)], to eat the apple at (8, 4).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
