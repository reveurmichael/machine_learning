You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
To solve this problem, let's carefully analyze the given inputs:

- Current head position: (1, 2)
- Current direction: LEFT
- Body cells: [(3, 2), (2, 2)]
- Apple position: (1, 1)

## Step-by-step Analysis:
### Step 1: Understand Movement and Constraints

We need to determine a safe path from the head's current position at (1, 2) to the apple at (1, 1). We cannot reverse direction immediately if we're moving LEFT, so our first move can only be RIGHT or DOWN.

### Step 2: Check Possible Moves

- If we move RIGHT, the new head will be at (0, 2), which is out of bounds.
- If we move DOWN, the new head will be at (1, 1) where the apple is located.

Since moving DOWN directly leads us to the apple and doesn't cause any immediate collision with walls or body parts, this seems like a straightforward solution.

### Step 3: Verify Path Safety

1. Current position: (1, 2)
2. Move DOWN to (1, 1)

This path avoids:
- Collision with the snake's body.
- Moving out of bounds.

## Final JSON Output:

Based on our analysis and the constraints provided, here is the resulting JSON object:

```json
{
  "moves": ["DOWN"],
  "reasoning": "Directly move DOWN from (1,2) to (1,1) where the apple is located."
}
```

This solution respects all movement rules, avoids collisions with walls and body parts, and achieves the goal of reaching the apple.
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (1, 2) and whose body cells are in list format [(3, 2), (2, 2)], to eat the apple at (1, 1).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
