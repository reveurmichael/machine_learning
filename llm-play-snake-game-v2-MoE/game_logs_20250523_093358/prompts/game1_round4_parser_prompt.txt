You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
I'll need to think through this problem step by step to determine the optimal path for the snake.

Let's start by understanding the current state:

- Snake head position: (7, 6)
- Current direction: UP
- Body cells: [(7, 5)]
- Apple position: (7, 1)

## Step-by-Step Analysis

### Current Position and Target:
The snake is currently at (7, 6) moving UP. The target apple is at (7, 1).

Since the current direction is UP, we can't directly reverse to DOWN.

### Direction Vectors:
- UP: (0, 1)
- DOWN: (0, -1)
- LEFT: (-1, 0)
- RIGHT: (1, 0)

### Movement Constraints:
We cannot reverse direction on the first move. So if moving UP, we can't immediately switch to DOWN.

### Path Planning:

From (7, 6) to (7, 1):
- The x-coordinate is already aligned.
- We need to move down by 5 units.

Since our current direction is UP and we cannot reverse to DOWN immediately, we must find a path that eventually gets us there safely while avoiding collisions with the body or grid boundaries.

### Step-by-step Path:
Given the constraints:

1. **FROM (7,6)**:
   - Current Direction: UP

2. **Move LEFT**:
   - New Position: (6, 6)
   - This avoids reversing direction and keeps us on track.

3. **Move RIGHT** (to realign):
   - New Position: (7, 6)

4. **Move DOWN** repeatedly:
   - Sequence of DOWN moves to reach (7,1).

Let's visualize this path:

- Current: (7, 6)
- Move LEFT -> (6, 6)
- Move RIGHT -> (7, 6)
- Now we can move DOWN safely without reversing immediately.

### Final Path:
To avoid immediate reversal and ensure safe movements:
- LEFT
- RIGHT (to realign to our x position)
- Five consecutive DOWN moves

Now let's format this as the required JSON output:

```json
{
  "moves": ["LEFT", "RIGHT", "DOWN", "DOWN", "DOWN", "DOWN", "DOWN"],
  "reasoning": "Move LEFT and RIGHT initially to avoid immediate direction reversal, then perform five DOWN moves to reach the apple safely."
}
```

This path avoids reversing direction immediately after an UP move and ensures we reach the apple at (7,1) without colliding with our body or grid boundaries.
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (7, 6) and whose body cells are in list format [(7, 5)], to eat the apple at (7, 1).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
