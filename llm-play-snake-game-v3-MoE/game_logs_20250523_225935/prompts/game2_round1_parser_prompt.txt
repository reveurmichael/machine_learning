You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
<think>
Okay, so I'm trying to help plan a safe path for the snake's head from (5,5) to reach the apple at (6,5). The snake is currently moving "NONE," which means it hasn't started moving yet. It also has no body segments because the body list is empty. That makes things easier since there's no one in front blocking its path.

First, I need to figure out the direction from (5,5) to (6,5). The apple is directly to the right of the head, so moving RIGHT seems like the obvious choice. But wait, can it move RIGHT immediately without any issues?

I remember that when moving, after each step, the snake's body should stay connected and avoid collisions with itself or walls. Since there are no other body parts blocking the way, moving RIGHT to (6,5) should be straightforward.

Let me check if this causes any immediate collision. The new head position is (6,5), which isn't occupied by any body segments because the body list is empty. Also, it's within the grid bounds since 6 and 5 are both between 0 and 9. So no walls or other snake parts are in the way.

Since the snake can move without growing (because it hasn't eaten an apple yet), after moving RIGHT, the head will be at (6,5). That should end the game successfully because the goal is to reach the apple.

I don't see any issues with reversing direction here because there's no previous movement. The main concern would have been if there were other body parts ahead, but since the snake is length 1, that's not a problem.

So, moving RIGHT once will get the head directly onto the apple without any complications.
</think>

```json
{
"moves": ["RIGHT"],
"reasoning": "The shortest path from (5,5) to (6,5) is directly to the right. Since there are no other snake body segments blocking this route and moving RIGHT does not cause a collision with walls or self."
}
```
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (5, 5) and whose body cells are in list format [], to eat the apple at (6, 5).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 starts with the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
