You are the secondary LLM in a Mixture-of-Experts system for a Snake game. Your job is to format the primary LLM's output into valid JSON.

Generate a valid JSON object from this Snake game primary LLM response (let's call it RESPONSE_1):

BEGINNING OF RESPONSE_1:

```
To solve this problem, we need to plan a sequence of moves for the snake to reach the apple while following all the movement rules and constraints. Let's analyze the current state:

1. Current head position: (6, 1)
2. Apple position: (7, 1)

The difference between these two positions is:
- X-axis: 7 - 6 = +1
- Y-axis: 1 - 1 = 0

So we need to move one unit to the right.

Let's check our constraints:
- We are moving DOWN currently, so we can't go UP on the first move.
- Our body position is (6, 2), which means if we go LEFT or DOWN, we'll collide with it.

Given these considerations:

1. From (6, 1) to (7, 1), we need to make one RIGHT move.
2. Since we can't reverse direction and the apple is directly right of our current position, moving RIGHT is both valid and safe.

Let's construct our JSON object:

```json
{
  "moves": ["RIGHT"],
  "reasoning": "The apple is directly to the right of the snake head at (7,1). Moving RIGHT from (6,1) to (7,1) is a direct and safe path."
}
```

This plan ensures that we'll safely reach the apple without colliding with our body or going out of bounds.
```

END OF RESPONSE_1.

## WHAT RESPONSE_1 LOOKS LIKE:
RESPONSE_1 might look like this:
  <think> THINK_PROCESS_TEXT_OF_RESPONSE_1 </think>
  FINAL_OUTPUT_TEXT_OF_RESPONSE_1

## OUTPUT FORMAT REQUIREMENTS OF YOUR ANSWER:
{
  "moves": ["MOVE1", "MOVE2", ...],
  "reasoning": "brief explanation"
}


## COORDINATE SYSTEM TO HELP YOU UNDERSTAND RESPONSE_1:
- UP = y + 1
- DOWN = y - 1
- RIGHT = x + 1
- LEFT = x - 1

Example Moves from (1,1):
  • UP → (1,2)
  • DOWN → (1,0)
  • RIGHT → (2,1)
  • LEFT → (0,1)

## THE MAIN OBJECTIVE OF RESPONSE_1 SO THAT YOU CAN UNDERSTAND BETTER RESPONSE_1:

The main objective of RESPONSE_1 is to generate a list of moves that leads the snake, whose head is now at (6, 1) and whose body cells are in list format [(6, 2)], to eat the apple at (7, 1).

## RULES:
- "moves" must be a list of directions from: "UP", "DOWN", "LEFT", "RIGHT"
- "reasoning" must be a brief explanation for the chosen path
- If after reading RESPONSE_1, according to your understanding, no valid path exists or can't be determined, or if you are not sure about the text's meaning of path planning, use: { "moves": [], "reasoning": "NO_PATH_FOUND" } or { "moves": [], "reasoning": "I_CANNOT_UNDERSTAND_THE_TEXT" }

## WHAT YOU SHOULD DO:
- First, if RESPONSE_1 contains the word "ERROR" (capitalized), you should return { "moves": [], "reasoning": "ERROR" }.
- Second, if RESPONSE_1 contains the <think>...</think> tags, you should ignore THINK_PROCESS_TEXT_OF_RESPONSE_1 and rely solely on FINAL_OUTPUT_TEXT_OF_RESPONSE_1 to figure out your answer in JSON format.
- Third, if RESPONSE_1 does not contain the <think>...</think> tags, you should use use the whole text of RESPONSE_1 to figure out your answer in JSON format. Texts at the beginning of RESPONSE_1 are much less important than the texts torwards the end.

Return ONLY the JSON object without any additional text.
